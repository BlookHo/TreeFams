-# Autocomplete helper and global view vars
- klass_name = normolized_members_name.to_s.singularize.capitalize
- klass_sex_id = eval("#{klass_name}.sex_id")
- klass_descriptions = @@klass_descriptions = eval("#{klass_name}.descriptions")

- if klass_sex_id == 0 && normolized_members_name == 'mothers'
  -# Женские для матери (включают пункт неизвестно)
  - autocomplete_names = @@autocomplete_names = Name.approved.female_extended.map{|n| n.name.mb_chars.capitalize}
- elsif klass_sex_id == 0 && normolized_members_name != 'mothers'
  -# Женские
  - autocomplete_names = @@autocomplete_names = Name.approved.female.map{|n| n.name.mb_chars.capitalize }
- else
  -# Мужские
  - autocomplete_names = @@autocomplete_names = Name.approved.male.map{|n| n.name.mb_chars.capitalize }

-# Default filed for new record
= render 'welcome/form/field', remove_link: false if members.empty?

-# Fields for existing family members with errors
- eval("current_author.family.#{normolized_members_name}").each_with_index do |member, index|
  = render 'welcome/form/field', objekt: member, remove_link: (index != 1)


- if eval("#{klass_name}").allow_multiple?
  .control.add_member
    = link_to "У меня есть еще #{klass_descriptions[0]}", add_member_field_path("father"), remote: true, class: [:btn, :green]
